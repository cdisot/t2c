@using Domain.T2C.Interface
@model T2C.Models.CellModel

@{
    ViewBag.Title = "Details";
    Layout = "~/Views/Shared/_Administrator.cshtml";
}



<div class="row ">
    <div class="col-lg-7 col-md-7 col-md-offset-1">
        <div class="property-images imagen-center ">

            <h2>@Html.DisplayFor(model => model.Name)</h2>
            <!-- Slider Starts -->
            <div id="myCarousel" class="carousel slide " data-ride="carousel">

                @{
                    var imagenes = Model.Imagens;
                    var enumerable = imagenes as IList<IImagen> ?? imagenes.ToList();
                    if (imagenes != null && enumerable.Any())
                    {
                        <ol class="carousel-indicators hidden-xs">
                            @for (int i = 0; i < enumerable.Count(); i++)
                            {
                                if (i == 0)
                                {
                                    <li data-target="#myCarousel" data-slide-to=i class="active"></li>
                                }
                                else
                                {
                                    <li data-target="#myCarousel" data-slide-to=i class=""></li>
                                }
                            }
                        </ol>

                        <div class="carousel-inner">
                            @for (int i = 0; i < enumerable.Count(); i++)
                            {
                                var pathImagen = enumerable[i].PathImagen;
                                <div class="item ">
                                    <img src=@pathImagen class="properties" alt="properties">
                                </div>
                            }

                        </div>
                    }
                    else
                    {
                        <div class="item ">
                            <img src=~/Resources/notImage.jpg class="properties" alt="properties" style="width: 100%; height: 100%;">
                        </div>
                    }

                }

                <a class="left carousel-control" href="#myCarousel" data-slide="prev"><span class="glyphicon glyphicon-chevron-left"></span></a>
                <a class="right carousel-control" href="#myCarousel" data-slide="next"><span class="glyphicon glyphicon-chevron-right"></span></a>
            </div>
            <!-- #Slider Ends -->
            <button type="submit" class="btn btn-danger btn-s col-md-4">
                <span class="glyphicon glyphicon-edit"></span> @Html.ActionLink("Editar", "Edit", new { id = Model.Id })
            </button>
            <button type="submit" class="btn btn-warning btn-s col-md-4">
                <span class="glyphicon glyphicon-backward"></span> @Html.ActionLink("Volver", "Index")
            </button>
        </div>

    </div>

    <div class="col-lg-3 col-sm-3">
        <hr/>
        <div class="property-info">
            <p class="price">$@Html.DisplayFor(model => model.Price)</p>
            <div class="profile">
                <span class="glyphicon glyphicon-briefcase"></span> Compañía
                <p>@Html.DisplayFor(model => model.Company)</p>
            </div>
            <div class="profile">
                <span class="glyphicon glyphicon-copyright-mark"></span> Marca
                <p>@Html.DisplayFor(model => model.Category)</p>
            </div>
            <div class="profile">
                <span class="glyphicon glyphicon-floppy-disk"></span> Memoria
                <p>@Html.DisplayFor(model => model.Memory) GB</p>
            </div>

            
            @{

                if (!string.IsNullOrEmpty(Model.Model))
                {
                    <div class="profile">
                        <span class="glyphicon glyphicon-barcode"></span> Modelo
                        <p>@Html.DisplayFor(model => model.Model)</p>
                    </div>
                }
                if (!string.IsNullOrEmpty(Model.Generation))
                {
                    <div class="profile">
                        <span class="glyphicon glyphicon-share"></span> Generación
                        <p>@Html.DisplayFor(model => model.Generation)</p>
                    </div>
                }
}
            
           


            <div class="profile">
                <span class="glyphicon glyphicon-bullhorn"></span> Estado
                <p>@Html.DisplayFor(model => model.Condition)</p>
            </div>

            @{
                var enciende = "No";
                if (Model.Start)
                {
                    enciende = "Si";
                }
            }
            <div class="profile">
                <span class="glyphicon glyphicon-sort"></span> Enciende
                <p>@enciende</p>

            </div>
        </div>



    </div>


</div>





