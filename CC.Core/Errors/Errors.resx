<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AgenciaActualizada" xml:space="preserve">
    <value>La agencia fue actualizada satisfactormiante</value>
  </data>
  <data name="AgenciaCreada" xml:space="preserve">
    <value>La agencia fue creada satisfactoriamente</value>
  </data>
  <data name="AgenciaEliminada" xml:space="preserve">
    <value>La agencia fue eliminada satisfactoriamente</value>
  </data>
  <data name="AgenciaExiste" xml:space="preserve">
    <value>La agencia ya existe</value>
  </data>
  <data name="AgenciaModificada" xml:space="preserve">
    <value>Se modificó la agencia satisfactoriamente.</value>
  </data>
  <data name="AgenciaNoExiste" xml:space="preserve">
    <value>La agencia no existe.</value>
  </data>
  <data name="AuthenticationFailedWrongEmailApiKey" xml:space="preserve">
    <value>Authentication failed, wrong Email or ApiKey</value>
  </data>
  <data name="CategoriaAdicionada" xml:space="preserve">
    <value>La categoría se adicionó correctamente a la agencia</value>
  </data>
  <data name="CategoriaExiste" xml:space="preserve">
    <value>La categoria existe.</value>
  </data>
  <data name="CategoriaNoExiste" xml:space="preserve">
    <value>No existe la categoría.</value>
  </data>
  <data name="CategoriaNoExisteAgencia" xml:space="preserve">
    <value>La categoria no existe en la agencia seleccionada.</value>
  </data>
  <data name="ClientApplicationAuthorizationDeniedToService" xml:space="preserve">
    <value>Client have not access granted to the requested service</value>
  </data>
  <data name="ItStaffNotExist" xml:space="preserve">
    <value>ItStaff doesn't exist</value>
  </data>
  <data name="ModuleAlreadyActive" xml:space="preserve">
    <value>The requested module is already active</value>
  </data>
  <data name="ModuleAlreadyDeactived" xml:space="preserve">
    <value>This module is already deactivated</value>
  </data>
  <data name="ModuleNotExist" xml:space="preserve">
    <value>Module doesn't exist</value>
  </data>
  <data name="ModuleNotExistOrDeactivated" xml:space="preserve">
    <value>Module doesn't exist or isn't Deactivated</value>
  </data>
  <data name="RequestedServiceNotExist" xml:space="preserve">
    <value>Requested service doesn't exist</value>
  </data>
  <data name="ServiceActivated" xml:space="preserve">
    <value>This service is activated</value>
  </data>
  <data name="ServiceDeactivated" xml:space="preserve">
    <value>This service is deactivated</value>
  </data>
  <data name="ServiceNotActivatedModuleDeactivated" xml:space="preserve">
    <value>El servicio no puede ser activado porque el modulo esta desactivado o porque no se a asignado el servicio a un modulo</value>
  </data>
  <data name="ServiceNotExist" xml:space="preserve">
    <value>Service doesn't exist</value>
  </data>
  <data name="ServiceNotExiste" xml:space="preserve">
    <value>El servicio no existe.</value>
  </data>
  <data name="ServiceNotExistOrDeactivated" xml:space="preserve">
    <value>Service doesn't exist or is Deactivated</value>
  </data>
  <data name="ServiceNotExistOrNotActivated" xml:space="preserve">
    <value>Service doesn't exist or isn't activated</value>
  </data>
  <data name="ServiceNotExistOrNotDeactivated" xml:space="preserve">
    <value>Service doesn't exist or isn't deactivated</value>
  </data>
  <data name="ServicioAdd" xml:space="preserve">
    <value>El servicio fue adicionado a la agencia.</value>
  </data>
  <data name="ServicioExiste" xml:space="preserve">
    <value>El servicio existe</value>
  </data>
  <data name="ServicioNoExisteAdd" xml:space="preserve">
    <value>No existe servicio para adicionar.</value>
  </data>
  <data name="ServicioNoExisteUpdate" xml:space="preserve">
    <value>El servicio para actualizar está vacio.</value>
  </data>
  <data name="ServiciosUpdateIguales" xml:space="preserve">
    <value>No existe modificaciones para realizar</value>
  </data>
</root>